const { Telegraf } = require('telegraf');
const { BOT_TOKEN } = require('./config');
const { loadData, saveData } = require('./utils/dataStore');
const { connectTelegramClient, getChannelMessages, client } = require('./telegramClient');

const bot = new Telegraf(BOT_TOKEN);
const data = loadData();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Client –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
connectTelegramClient()
  .then(() => {
    console.log('Telegram Client –ø–æ–¥–∫–ª—é—á—ë–Ω');
    watchChannelUpdates(); // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  })
  .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Client:', err.message));

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  const userId = ctx.from.id;
  if (!data[userId]) data[userId] = { channels: [] };
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n' +
      '/get_posts - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n' +
      '/my_channels - —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤'
  );
  saveData(data);
});

// –ö–æ–º–∞–Ω–¥–∞ /add_channel
bot.command('add_channel', async (ctx) => {
  const userId = ctx.from.id;
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:');

  bot.on('text', async (msgCtx) => {
    const channel = msgCtx.message.text;

    if (!data[userId]) data[userId] = { channels: [] };

    if (!data[userId].channels.some((ch) => ch === channel)) {
      data[userId].channels.push(channel);
      saveData(data);
      msgCtx.reply(`–ö–∞–Ω–∞–ª "${channel}" –¥–æ–±–∞–≤–ª–µ–Ω!`);

      // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      const chat = await client.getEntity(channel);
      client.addEventHandler(async (event) => {
        if (event.chatId === chat.id && event.message) {
          console.log(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ "${channel}": ${event.message.message}`);

          // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          if (data[userId].channels.includes(channel)) {
            bot.telegram.sendMessage(userId, `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channel}: ${event.message.message}`);
          }
        }
      }, { chats: [chat.id] });
    } else {
      msgCtx.reply('–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.');
    }
  });
});


// –ö–æ–º–∞–Ω–¥–∞ /get_posts
bot.command('get_posts', async (ctx) => {
  const userId = ctx.from.id;
  const userChannels = data[userId]?.channels || [];

  if (!userChannels.length) {
    return ctx.reply('–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.');
  }

  for (const channel of userChannels) {
    try {
      const messages = await getChannelMessages(channel);
      if (messages.length === 0) {
        ctx.reply(`–í –∫–∞–Ω–∞–ª–µ "${channel}" –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.`);
      } else {
        ctx.reply(`üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ "${channel}":`);
        messages.forEach((msg) => {
          ctx.reply(`${msg.date}: ${msg.text}`);
        });
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ "${channel}":`, err.message);
      ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ "${channel}".`);
    }
  }
});

async function watchChannelUpdates() {
  try {
    const uniqueChannels = Object.values(data)
      .flatMap((user) => user.channels)
      .filter((value, index, self) => self.indexOf(value) === index); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã

    for (const channel of uniqueChannels) {
      const chat = await client.getEntity(channel); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
      client.addEventHandler(async (event) => {
        if (event.chatId === chat.id && event.message) {
          console.log(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ "${channel}": ${event.message.message}`);

          // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª
          Object.entries(data).forEach(([userId, userData]) => {
            if (userData.channels.includes(channel)) {
              bot.telegram.sendMessage(userId, `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channel}: ${event.message.message}`);
            }
          });
        }
      }, { chats: [chat.id] });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤:', err.message);
  }
}


// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));
